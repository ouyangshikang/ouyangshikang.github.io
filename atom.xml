<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心猿意码</title>
  
  <subtitle>白陀的前端学习分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://frontman.cn/"/>
  <updated>2024-07-09T02:27:50.202Z</updated>
  <id>https://frontman.cn/</id>
  
  <author>
    <name>baituo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js数值精度问题及es6数值的拓展</title>
    <link href="https://frontman.cn/2018/03/01/js-precision-es6-number/"/>
    <id>https://frontman.cn/2018/03/01/js-precision-es6-number/</id>
    <published>2018-03-01T14:20:35.000Z</published>
    <updated>2024-07-09T02:27:50.202Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="js的数值精度问题"><a href="#js的数值精度问题" class="headerlink" title="js的数值精度问题"></a>js的数值精度问题</h3><blockquote><p>在js内部，整数和浮点数采用同样的存储方法(64位双精度浮点数)，所以有<code>66 === 66.00</code>。</p></blockquote><p>在涉及小数的运算时要注意数值精度的问题,举个人尽皆知的栗子🌰<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>  <span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure></p><p>JavaScript采用国际标准 <em>IEEE 754</em>，JavaScript浮点数的64个二进制位，从最左边开始，是这样组成的:</p><ul><li>第1位：符号位，0表示正数，1表示负数</li><li>第2位到第12位(11)：指数部分</li><li>第13位到第64位(52)：小数部分（即有效数字）</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://st-gdx.dancf.com/gaodingx/73047376/design/20200426-173521-8918.png" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li><strong><code>符号位</code>决定了一个数的正负，<code>指数部分</code>决定了数值的大小，<code>小数部分</code>决定了数值的精度</strong></li></ul><blockquote><p>国际标准IEEE 754 规定，有效数字第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字总是<code>1.xx...xx</code>的形式，其中xx..xx的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript 提供的有效数字最长为<code>53</code>个二进制位。</p></blockquote><p>  所以，一个数在 JavaScript 内部实际的表示形式为:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://st-gdx.dancf.com/gaodingx/73047376/design/20200426-174023-4f23.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><ul><li><p>精度最多只能到53个二进制位，这意味着，绝对值小于2的53次方的整数，即<strong>-(2^53-1) ~  2^53-1</strong>，都可以精确表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>); <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">1</span>; <span class="comment">//9007199254740992</span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">2</span>;  <span class="comment">// 9007199254740994</span></span><br><span class="line"><span class="number">9007199254740992222</span> <span class="comment">// 9007199254740992000</span></span><br></pre></td></tr></table></figure><p>大于2的53次方后，计算结果就开始混乱了，无法保持精度,并且多出的三个有效位无法保存，变成0。</p></li></ul><hr><h3 id="ES6中2进制和8进制的表示"><a href="#ES6中2进制和8进制的表示" class="headerlink" title="ES6中2进制和8进制的表示"></a>ES6中2进制和8进制的表示</h3><ul><li>二进制数值：前缀<code>0b/0B</code></li><li>八进制数值：前缀<code>0o/0O</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'二进制表示法:'</span>, <span class="number">0b00010</span> === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'八进制表示法:'</span>, <span class="number">0o0340</span> === <span class="number">224</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>将各进制转为10进制用Number()/ parseInt()方法,将10进制转化为各进制可以用toString(n)方法</p></blockquote><hr><h3 id="Number对象拓展"><a href="#Number对象拓展" class="headerlink" title="Number对象拓展"></a>Number对象拓展</h3><p>es6在Number对象上，新增了2个方法。</p><ul><li><p><strong>Number.isFinite()</strong>   检查数值是否是有限的，如果不是数值，返回false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">15</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">true</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="number">0.8</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="string">'string'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.isNaN()</strong>   检测数值是否为NaN， 如果不是数值，也返回false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">15</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">true</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="string">'NaN'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(<span class="number">0.4</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>它们与传统的全局方法<strong><em>isFinite()</em></strong>和<strong><em>isNaN()</em></strong>的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断。而这两个新方法<code>只对数值有效</code>。 先进行是否是数值的判断，是数值再进行具体判断。</p></blockquote><ul><li><p><strong>ES6将全局方法parseInt()和parseFloat()移植到Number对象上，其他都保持不变</strong></p></li><li><p><strong>Number.isInteger()</strong> 判断一个数值是否为整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">66</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">66.0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">66.6</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">'nice'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.EPSILON</strong>  它表示 1 与大于 1 的最小浮点数之间的差即2的-52次方,这是<code>JavaScript能够表示的最小精度</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.EPSILON === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-52</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;js的数值精度问题&quot;&gt;&lt;a href=&quot;#js的数值精度问题&quot; class=&quot;headerlink&quot; title=&quot;js的数值精度问题&quot;&gt;&lt;/a&gt;js的数值精度问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在js内部，整数和浮点数采用同样的存储方法(64
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://frontman.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>git commit 基本规范</title>
    <link href="https://frontman.cn/2017/06/06/git-commit-standards/"/>
    <id>https://frontman.cn/2017/06/06/git-commit-standards/</id>
    <published>2017-06-06T13:45:18.000Z</published>
    <updated>2024-07-09T02:40:40.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单介绍下 git commit 的规范。</p></blockquote><p>我们每次进行 git 提交的时候，git commit 都包括三个部分：</p><ul><li><strong>header</strong></li><li><strong>body</strong></li><li><strong>footer</strong></li></ul><p>header 是必须的,body 和 footer 经常可以省略</p><hr><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>header 部分就只有一行(<strong><em>不超过 72 个字符</em></strong>), 包括三个字段<code>type</code>(必须)，<code>scope</code>(可选)，<code>subject</code>(必须)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>type</strong>:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">feat：    增加新功能（feature）</span><br><span class="line">fix：     修补bug</span><br><span class="line">docs：    仅仅修改了文档，比如说README,CHANGELOG等等</span><br><span class="line">style：   修改了空格，格式缩进，样式格式（不改变代码逻辑的变动）</span><br><span class="line">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">test：    增加测试，包括单元测试等</span><br><span class="line">perf：    优化相关，比如提升了性能，体验等</span><br><span class="line">chore：   构建过程或辅助工具的变动</span><br><span class="line">revert：  回滚到上一个版本</span><br><span class="line">build：   Build System | 构建</span><br></pre></td></tr></table></figure><ul><li><strong>scope</strong>:<br>scope 用作说明 commit 的影响范围。</li><li><strong>subject</strong>:<br>subject 是对 commit 的简短说明。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以动词开头</span><br><span class="line">第一个字母小写</span><br><span class="line">结尾没有句号</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;简单介绍下 git commit 的规范。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们每次进行 git 提交的时候，git commit 都包括三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;header&lt;/strong&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="git" scheme="https://frontman.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>javascript中的深拷贝和浅拷贝</title>
    <link href="https://frontman.cn/2017/05/21/deepCopy/"/>
    <id>https://frontman.cn/2017/05/21/deepCopy/</id>
    <published>2017-05-21T15:12:06.000Z</published>
    <updated>2024-07-09T02:27:50.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ul><li>对于字符串类型，浅拷贝是对值的复制;</li><li>对于对象或数组来说，浅拷贝是对<code>对象地址的复制</code>，并没有开辟新的栈。就是将一个对象的内存地址的“编号”拷贝给另一个对象。<code>只复制一层对象的属性</code>.</li></ul><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><ul><li>实现原理: 先新建一个空对象，<code>内存中新开辟一块地址</code>，把被复制对象的<code>所有可枚举的(注意可枚举的对象)属性方法</code>一一复制过来，注意要用递归来复制子对象里面的所有属性和方法，直到子子…..属性为基本数据类型。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>深拷贝理解两点:1. 新开辟内存地址，2,递归来刨根复制。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="浅拷贝-1"><a href="#浅拷贝-1" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>在Javascript 中，将一个对象赋值给一个变量其实只是将这个对象的引用拷贝了一份<br>假设这么一段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> man = &#123;</span><br><span class="line">     name: <span class="string">'aepkill'</span>,</span><br><span class="line">     sex: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> superMan = man;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://st-gdx.dancf.com/gaodingx-dev/73047376/video-cliper/20200426-173241-ba43.png" alt title>                </div>                <div class="image-caption"></div>            </figure><blockquote><p>并没有创建一个新的对象实体，而是仅仅拷贝了这种引用关系。<br>所以假设执行 man.name = ‘aotuman’ ，那么superMan.name的值也会变成 ‘aotuman’，因为其实他们引用的是同一个对象实体。</p></blockquote><p>很多场景下并不希望出现像上面中那样， 我们希望能使两个变量相互独立，不再引用同一个对象<br>这很容易实现，只需要申明一个新的对象，然后将这个对象的所有字段原封不动拷贝过去即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">     <span class="comment">//创建一个新对象</span></span><br><span class="line">     <span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line">     <span class="comment">//返回keys数组，包含obj所有可枚举的自身属性名</span></span><br><span class="line">     <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),key=<span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;keys.length;i++)&#123;</span><br><span class="line">          key = keys[i];</span><br><span class="line">          <span class="comment">//将obj所有属性复制到新对象</span></span><br><span class="line">          newObj[key] = obj[key];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">     name:<span class="string">'java'</span>,</span><br><span class="line">     age:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hero = copy(people);</span><br><span class="line">people.name = <span class="string">'javascript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(people.name); <span class="comment">//javascript</span></span><br><span class="line"><span class="built_in">console</span>.log(hero.name); <span class="comment">// java</span></span><br></pre></td></tr></table></figure><p>两个变量已经不在引用同一个对象，二者的修改是相互独立的</p><h4 id="深拷贝-1"><a href="#深拷贝-1" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>上面已经完成了基本的拷贝，但是只拷贝了第一层的关系，如果对象不止一层的话，上面的函数就不适用了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">     name: <span class="string">'java'</span>,</span><br><span class="line">     age: <span class="number">22</span>,</span><br><span class="line">     concat:&#123;</span><br><span class="line">          tel:<span class="string">'1568552256'</span>,</span><br><span class="line">          qq:<span class="string">'54666651'</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hero = copy(people);</span><br><span class="line">people.concat.tel = <span class="string">'1111111111'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(people.concat.tel); <span class="comment">//1111111111</span></span><br><span class="line"><span class="built_in">console</span>.log(hero.concat.tel); <span class="comment">// 1111111111</span></span><br></pre></td></tr></table></figure><p>因为只拷贝了一层，所以people 与 hero 中的concat 字段还是引用同一个对象，所以当执行 people.concat.tel = ‘1111111111’ 后，hero .concat.tel 也变成了 ‘1111111111 ‘ ，该如何解决这个问题呢？</p><blockquote><p>此时，需要对这个问题进行梳理并抽象：定义一个函数deepCopy，该函数遍历传入的对象，如果该字段的值不是一个对象则可直接赋值给新对象，否则对该字段用函数deepCopy进行递归操作。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">     <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),</span><br><span class="line">                    key = <span class="literal">null</span>,</span><br><span class="line">                    temp = <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">          key = keys[i];</span><br><span class="line">          temp = obj[key];</span><br><span class="line">          <span class="comment">// 如果字段的值也是一个对象则递归操作</span></span><br><span class="line">          <span class="keyword">if</span> (temp &amp;&amp; <span class="keyword">typeof</span> temp === <span class="string">'object'</span>) &#123;</span><br><span class="line">               newObj[key] = deepCopy(temp);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 否则直接赋值给新对象</span></span><br><span class="line">               newObj[key] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">     name: <span class="string">'java'</span>,</span><br><span class="line">     age: <span class="number">22</span>,</span><br><span class="line">     concat: &#123;</span><br><span class="line">          tel: <span class="string">'1568552256'</span>,</span><br><span class="line">          qq: <span class="string">'54666651'</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hero = deepCopy(people);</span><br><span class="line">people.concat.tel = <span class="string">'1111111111'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(people.concat.tel);<span class="comment">//1111111111</span></span><br><span class="line"><span class="built_in">console</span>.log(hero.concat.tel);<span class="comment">// 1568552256</span></span><br></pre></td></tr></table></figure><p>OK,deepCopy 函数可以拷贝任意深度的对象了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h3&gt;&lt;h4 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h4&gt;&lt;u
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://frontman.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>搞懂this及相关问题</title>
    <link href="https://frontman.cn/2017/05/12/about-this/"/>
    <id>https://frontman.cn/2017/05/12/about-this/</id>
    <published>2017-05-12T14:49:39.000Z</published>
    <updated>2024-07-09T02:27:50.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="this的使用场合"><a href="#this的使用场合" class="headerlink" title="this的使用场合"></a>this的使用场合</h3><ol><li>全局环境下使用，指的是顶层对象 <code>window</code></li><li>构造函数中的this，指的是实例对象</li><li>对象的方法 当A对象的方法赋予给另一个B对象，该方法中的this指向就变成B</li></ol><h3 id="照常举个栗子"><a href="#照常举个栗子" class="headerlink" title="照常举个栗子:"></a>照常举个栗子:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    foo() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = obj.foo;</span><br><span class="line">obj.foo() <span class="comment">// 打印出的 this 是 obj</span></span><br><span class="line">bar() <span class="comment">// 打印出的 this 是 window</span></span><br></pre></td></tr></table></figure><p>为什么呢？<br>解决这类问题需要理解函数的调用问题，js里有三种函数的调用方式：</p><ul><li>func(a,b);</li><li>obj.child.method(a,b);</li><li>func.call(context,a,b);<br>func.apply(context,[a,b]); //context为函数执行环境的上下文</li></ul><p>但其实前两种都可以转化为第三种(以call的形式)：</p><ul><li>func.call(undefine, a,b);</li><li>obj.child.method.call(obj.child,a,b);</li></ul><p>所以，栗子可以吃了:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.foo(); -----&gt;   obj.foo.call(obj);</span><br><span class="line">bar();     -----&gt;  bar.call(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>在浏览器中，如果context传入的值为undefined，null, 还有空值 ，那么默认的就是window</p></blockquote><ul><li>当然，如果你想让bar()的context指向obj,那就直接bar.call(obj),指定当前context(函数内部的this)绑定到obj上</li></ul><blockquote><p>总结一句话：函数在哪里被调用，this就指向哪里</p></blockquote><hr><h3 id="绑定this的方法-call-apply-bind的区别"><a href="#绑定this的方法-call-apply-bind的区别" class="headerlink" title="绑定this的方法(call,apply,bind的区别)"></a>绑定this的方法(call,apply,bind的区别)</h3><ol><li>call与apply两者对于参数的接受方式不同,call接受的是参数列表，apply接受的是一个包含多个参数的数组</li></ol><ul><li>apply的语法： <code>fun.apply(thisArg[, argsArray])</code><br>如xxx.apply(undefined, [1,2,3])</li><li>call的语法：<code>fun.call(thisArg[, arg1[, arg2[, ...])</code><br>如xxx.call(undefined, 1,2,3])</li></ul><ol start="2"><li><code>bind</code>和call,apply的作用一样，动态指定this,不同在于返回值,bind可以强制指定this到某个对象，还可以绑定原函数的参数,然后返回一个新函数，之后不会修改，即预设了对象的this和参数</li><li>看下面bind的demo<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;&#125;;</span><br><span class="line">counter.count <span class="comment">// 0</span></span><br><span class="line">counter.inc()counter.count <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * counter.inc内部的this，默认指向counter对象。</span></span><br><span class="line"><span class="comment"> * 如果将这个方法赋值给另一个变量，就会出错,如下：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  inc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> func = counter.inc;</span><br><span class="line">func();</span><br><span class="line">counter.count <span class="comment">// 0</span></span><br><span class="line">count <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 函数func是在全局环境中运行的，这时inc内部的this指向顶层对象window，</span></span><br><span class="line"><span class="comment"> *  所以counter.count是不会变的，反而创建了一个全局变量count。</span></span><br><span class="line"><span class="comment"> *  因为window.count原来等于undefined，进行递增运算后undefined++就等于NaN。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用bind方法，将inc内部的this绑定到counter对象</span></span><br><span class="line"><span class="keyword">var</span> func = counter.inc.bind(counter);</span><br><span class="line">func();</span><br><span class="line">counter.count <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ol><p>绑定原函数的参数这里不再赘述。</p><hr><h3 id="关于this的题目："><a href="#关于this的题目：" class="headerlink" title="关于this的题目："></a>关于this的题目：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> john = &#123;</span><br><span class="line">     firstName: <span class="string">"John"</span></span><br><span class="line"> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.firstName + <span class="string">": hi!"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"> john.sayHi = func;</span><br><span class="line"> john.sayHi();  <span class="comment">//john.sayHi()的this指向john因此输出"John:hi!"</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">// this指向document</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//this指向window</span></span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//分别输出document和window</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> john = &#123;</span><br><span class="line">  firstName: <span class="string">"John"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert( <span class="keyword">this</span>.firstName )</span><br><span class="line">&#125;;</span><br><span class="line">func.call(john);</span><br><span class="line"><span class="comment">//输出John,因为func.call(john)将func的this指向了john对象</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span>= &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>   <span class="comment">//将当前this保存</span></span><br><span class="line">    $btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(_this) <span class="comment">//this指向$btn</span></span><br><span class="line">      _this.showMsg();<span class="comment">//$btn没有showMsg()方法</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  showMsg: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'nice'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;this的使用场合&quot;&gt;&lt;a href=&quot;#this的使用场合&quot; class=&quot;headerlink&quot; title=&quot;this的使用场合&quot;&gt;&lt;/a&gt;this的使用场合&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;全局环境下使用，指的是顶层对象 &lt;code&gt;window&lt;/code&gt;&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://frontman.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>原型链的理解</title>
    <link href="https://frontman.cn/2017/05/10/learn-prototype/"/>
    <id>https://frontman.cn/2017/05/10/learn-prototype/</id>
    <published>2017-05-10T15:26:27.000Z</published>
    <updated>2024-07-09T02:27:50.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先给出个栗子吃"><a href="#先给出个栗子吃" class="headerlink" title="先给出个栗子吃"></a>先给出个栗子吃</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'My name is :'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"KK"</span>)</span><br><span class="line">p.sayName();</span><br></pre></td></tr></table></figure><h4 id="我们解释下-Person、p、prototype、proto、constructor之间的关系哦"><a href="#我们解释下-Person、p、prototype、proto、constructor之间的关系哦" class="headerlink" title="我们解释下 Person、p、prototype、proto、constructor之间的关系哦"></a>我们解释下 Person、p、prototype、proto、constructor之间的关系哦</h4><ol><li><code>Person</code>是构造函数，<code>p</code>是<code>Person</code>的一个实例</li><li>所有的对象都有<code>__proto__</code>属性,只有函数有<code>prototype</code></li><li>每个函数都有自己的原形对象 <code>prototype</code>， 而<code>prototype</code>中有<code>__proto__</code>和<code>constructor</code>, <code>constructor</code>顾名思义就是构造函数,<code>__proto__</code>就是是实例的原型链</li><li>在实例中，<code>__proto__</code>可看做是key,<code>prototype</code>可看做是value。xxx.proto === yyy.prototype</li></ol><h4 id="那么，在这个栗子中-可以得出这么些结论"><a href="#那么，在这个栗子中-可以得出这么些结论" class="headerlink" title="那么，在这个栗子中,可以得出这么些结论:"></a>那么，在这个栗子中,可以得出这么些结论:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.constructor == Person <span class="comment">//true</span></span><br><span class="line">p.__proto__ === Person.prototype <span class="comment">//true</span></span><br><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.constructor == <span class="built_in">Object</span>,</span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ == <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="原型链的概念理解："><a href="#原型链的概念理解：" class="headerlink" title="原型链的概念理解："></a>原型链的概念理解：</h3><blockquote><p>使用一个构造函数创造一个实例对象，在此对象上调用相应的属性和方法时，JS存在一个搜索机制，首先查找它本身有没有，如果没有，则顺着<code>__ proto</code><strong>这个指针去找它的构造函数的原型上有没有，如果没有，再顺着原型的<code></code></strong> proto__<code>向上去找，也就是说，只要存在</code><strong> proto</strong><code>这个指针，在没有找到对应的属性与方法时，查找不会停下，直到没有</code><strong> proto</strong><code></code>为止，这样的一种形式可行的结构基础就叫 原型链 。</p></blockquote><h4 id="再给张图就更完美了："><a href="#再给张图就更完美了：" class="headerlink" title="再给张图就更完美了："></a>再给张图就更完美了：</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://st-gdx.dancf.com/gaodingx-dev/73047376/video-cliper/20200426-171201-3d06.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="关于原型的其他知识点"><a href="#关于原型的其他知识点" class="headerlink" title="关于原型的其他知识点"></a>关于原型的其他知识点</h3><h4 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf"></a>instanceOf</h4><p>作用：用来检测一个对象的类型</p><ul><li><code>instanceof</code>运算符用来测试一个对象在其原型链中是否存在一个构造函数的<code>prototype</code>属性<br><strong>A instanceof B</strong><blockquote><p>表示A的的原型链中是否存在 B.prototype ： 有就return true,反之return false</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">make, model, year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.make = make;</span><br><span class="line">  <span class="keyword">this</span>.model = model;</span><br><span class="line">  <span class="keyword">this</span>.year = year;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mycar = <span class="keyword">new</span> Car(<span class="string">"Honda"</span>, <span class="string">"Accord"</span>, <span class="number">1998</span>);</span><br><span class="line"><span class="keyword">var</span> a = mycar <span class="keyword">instanceof</span> Car;</span><br><span class="line"><span class="comment">// 返回 true  var b = mycar instanceof Object; // 返回 true</span></span><br><span class="line"><span class="keyword">var</span> simpleStr = <span class="string">"This is a simple string"</span>;</span><br><span class="line"><span class="keyword">var</span> myString  = <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">simpleStr <span class="keyword">instanceof</span> <span class="built_in">String</span>;</span><br><span class="line"><span class="comment">// returns false, 检查原型链会找到 undefined，simpleStr不是对象</span></span><br><span class="line">myString  <span class="keyword">instanceof</span> <span class="built_in">String</span>;</span><br><span class="line"><span class="comment">// returns true</span></span><br></pre></td></tr></table></figure><h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h4><ul><li><code>Object.create()</code> 方法使用指定的原型对象和其属性创建了一个新的对象<br>语法：<code>Object.create(proto, [ propertiesObject ])</code><br>// 第一个参数为一个对象，应该是新创建的对象的原型。<br>作用： 创建一个新的对象,第一层原型链指向对应的参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="string">'name'</span>:<span class="string">'Jack'</span>&#125;</span><br><span class="line">b = <span class="built_in">Object</span>.create(a)</span><br><span class="line">b.__proto__ === a <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先给出个栗子吃&quot;&gt;&lt;a href=&quot;#先给出个栗子吃&quot; class=&quot;headerlink&quot; title=&quot;先给出个栗子吃&quot;&gt;&lt;/a&gt;先给出个栗子吃&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://frontman.cn/tags/javascript/"/>
    
  </entry>
  
</feed>
